Утилита для аннотирования корпусов

========================================
ТРЕБОВАНИЯ К ОКРУЖЕНИЮ:
========================================

1. Python 2, также необходимо установить python-модуль chardet (https://pypi.org/project/chardet/)
2. Tree-tagger (https://www.cis.uni-muenchen.de/~schmid/tools/TreeTagger/)
   После установки папка с бинарным файлом tree-tagger должна быть добавлена к путям поиска бинарных файлов,
   чтобы утилита аннотирования смогла ей воспользоваться. Либо можно указать путь к tree-tagger с помощью
   опции --tree-tagger режима verb-phrases (в других режимах tree-tagger не требуется, подробнее о режимах запуска см. ниже).


========================================
ФОРМАТ ВХОДНЫХ ДАННЫХ:
========================================

Утилита работает с корпусами, имеющими следующую структуру:

- папка_корпуса/
- папка_корпуса/класс_1/
- папка_корпуса/utf-8/класс_1/файл_1.txt
- папка_корпуса/utf-8/класс_1/файл_2.txt
- папка_корпуса/utf-8/класс_1/файл_3.txt
...
- папка_корпуса/utf-8/класс_N/
- папка_корпуса/utf-8/класс_N/файл_1.txt
- папка_корпуса/utf-8/класс_N/файл_2.txt
- папка_корпуса/utf-8/класс_N/файл_3.txt
...


Где "класс_1", ..., "класс_N" – папки, отвечающие классам, на которые разбит корпус.
Например: "illegal", "aggress", "neutral", ...


========================================
ФОРМАТ ВЫХОДНЫХ ДАННЫХ:
========================================

На выходе получается следующая структура файлов:

- папка_корпуса/
- папка_корпуса/класс_1/
- папка_корпуса/тип_корпуса/0.xml
- папка_корпуса/тип_корпуса/1.xml
- папка_корпуса/тип_корпуса/2.xml
...
- папка_корпуса/тип_корпуса/metadata.csv

- папка_корпуса/тип_корпуса.csv/класс_1/0.csv
- папка_корпуса/тип_корпуса.csv/класс_1/1.csv
- папка_корпуса/тип_корпуса.csv/класс_1/2.csv
...
- папка_корпуса/тип_корпуса.csv/класс_1/K1.csv

- папка_корпуса/тип_корпуса.csv/класс_2/{K1+1}.csv
- папка_корпуса/тип_корпуса.csv/класс_2/{K1+2}.csv
- папка_корпуса/тип_корпуса.csv/класс_2/{K1+3}.csv
...
- папка_корпуса/тип_корпуса.csv/класс_2/K2.csv

...


В папке "папка_корпуса/тип_корпуса" содержится корпус в формате для импорта в TXM.
В папке "папка_корпуса/тип_корпуса.csv" содержится исходных аннотированный корпус в формате CSV, разбитый по классам согласно входному корпусу.

Тип корпуса имеет вид
- ngrams-{MIN_ORDER}-{MAX_ORDER}
  Н-граммный корпус (MIN_ORDER, MAX_ORDER – минимальный и максимальный порядок н-грамм соответственно)
  В корпусе у каждой н-граммы есть свойство order – ее порядок.
- verb-phrases
  Корпус со словами и глагольными группами
  У каждого слова или глагольной группы имеются следующие свойства: ng_stem (псевдоосновы), ng_type (флаг, равный 1 если элемент – глагольная группа, 0 – иначе), ng_morph_tags (морфологические характеристики по вресии нашей морфологии), tt_lemma (лемма слова по версии tree-tagger), tt_tag (код грамматичесих характеристик слова от tree-tagger). Для именных групп свойства каждого слова склеиваются.


========================================
СТРУКТУРА ФАЙЛОВ УТИЛИТЫ:
========================================

- Readme.txt (этот файл)
- run.py (файл запуска утилиты)
- lib.py (служебный файл)
- utils.py (служебный файл)
- resources/ (папка со служебными утилитами и данными для них)


========================================
ЗАПУСК УТИЛИТЫ:
========================================

Утилита запускается с помощью файла run.py:

python2 run.py {опции}

Справку по опциям можно получить вызвав команду

python2 run.py --help


Утилита работает в 3 режимах:

- python2 run.py ngrams --min-order 2 --max-order 4 папка_корпуса {опции}
-- построение н-граммного корпуса

- python2 run.py verb-phrases папка_корпуса {опции}
-- построение корпуса со словами и глагольными группами

- python2 run.py merge папка_корпуса {опции}
-- преобразование корпуса путем слияния всех файлов каждого корпуса в один файл
   На выходе получается корпус в папке "папка_корпуса/merged".
   Структура корпуса аналогична исходному, но в каждом классе находится ровно по одному файлу,
   полученному слиянием всех файлов соотвествующего класса.
   Однофайловые корпуса обрабатываются нескольно быстрее многофайловых. Поэтому, если при анализе корпусов разбиение на исходные
   файлы не важно (как правило так и есть), рекомендуется пользоваться именно такими корпусами.

Справку по опциям каждого из режимов можно получить аналогичным образом:

python2 run.py ngrams --help
python2 run.py verb-phrases --help
python2 run.py merge --help

Если при запуске утилиты вы находитесь в папке утилиты, дополнительные опции не требуются.
Они отвечают за указание пути к служебным утилитам и необходимым для них файлам.


========================================
ИМПОРТ В TXM (английский интерфейс, версия 0.7.9):
========================================

В папке "папка_корпуса/тип_корпуса" содержится корпус в формате для импорта в TXM.

Для импорта в TXM необходимо выполнить следующие действия:

1. Нажать File -> Import -> XML/w + CSV
2. В открывшейся вкладке "Select source directory" и выбрать директорию для иморта в TXM
3. В разделе "Corpus infos" ввести название корпуса
4. В разделе "Main language" снять галочку "Annotate the corpus", выбрать пункт "Select" и поменять значение на "ru".
5. В разделе "Lexical Segmentation" снять галочку с "Tokenization"
6. В разделе "Editions" снять галочку "Build edition"
7. Нажать "Start corpus import"
